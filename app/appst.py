import json
import datetime
import requests
import streamlit as st
import pandas as pd
import folium
import streamlit.components.v1 as components

# Import folium MarkerCluster plugin
from folium.plugins import MarkerCluster
# Import folium MousePosition plugin
from folium.plugins import MousePosition
# Import folium DivIcon plugin
from folium.features import DivIcon

def serialize_datetime(obj): 
    if isinstance(obj, datetime.datetime): 
        return obj.isoformat() 
    raise TypeError("Type not serializable") 

# –ó–∞–≥–æ–ª–æ–∫
st.title('–ü—Ä–æ–≥–Ω–æ–∑ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–µ–∑–¥–∫–∏')

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
# –ß–∏—Å–ª–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
passenger_count  = st.text_input(
    "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤ üëá",
    value = 1
    )

# –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
departure_address = st.text_input(
    "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è üëá",
    value = "124 E 73rd St, New York, NY 10021"
    )
# –ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
destination_address = st.text_input(
    "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è üëá",
    value = "142-06 Foch Blvd, South Ozone Park, NY 11436", 
    )
agree = st.checkbox("–Ø —Å–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–µ–∑–¥–∫–µ")
if agree:
     store_and_fwd_flag =  1
else:
     store_and_fwd_flag =  0
# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏
date_trip = st.date_input("–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è üëá", value="today")
time_tripe = st.time_input("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è üëá", value="now")
date = datetime.datetime(date_trip.year,
                         date_trip.month,
                         date_trip.day,
                         time_tripe.hour,
                         time_tripe.minute)
st.write("–î–∞—Ç–∞/–≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", date)
date_str = date.strftime("%Y-%m-%d %H:%M:%S")


if (st.button('–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏')):
    res = {
            'passenger_count': passenger_count,
            'departure_address': departure_address,
            'destination_address': destination_address,
            'store_and_fwd_flag': store_and_fwd_flag,
            'date': date_str,
            }
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    requestpost = requests.post(url="http://127.0.0.1:8000/predict", data=json.dumps(res))
    response_data = requestpost.json()
    #st.write("–í—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ —Ç–∞–∫—Å–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –î–∂–∞—Ñ–∞—Ä", response)
    predict_result = response_data['result']['trip_duration']
    route = response_data['route']
    start_point = response_data['start_point']
    end_point = response_data['end_point']
    total_distance = d = round(response_data['total_distance']/1000, 3)
    st.write("–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:", total_distance, ' –∫–º')
    st.write("–í—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ —Ç–∞–∫—Å–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –ê–ª–ª–∞–¥–∏–Ω", str(datetime.timedelta(seconds=predict_result['0'])))
    st.write("–í—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ —Ç–∞–∫—Å–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –î–∂–∞—Ñ–∞—Ä", str(datetime.timedelta(seconds=predict_result['1'])))
    
    # –ù–∞–Ω–æ—Å–∏–º –Ω–∞ –∫–∞—Ä—Ç—É
    
    #st.write("–í—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏ –Ω–∞ —Ç–∞–∫—Å–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –î–∂–∞—Ñ–∞—Ä", start_point)


    # –°–æ–∑–¥–∞—ë–º –∫–∞—Ä—Ç—É
    New_York_map = folium.Map(
        location = [40.70134, -73.88988],    # —à–∏—Ä–æ—Ç–∞ –∏ –ù—å—é –ô–æ—Ä–∫–∞
        zoom_start = 10
        )                    

    # –°–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—ã
    departure_destination_point = folium.FeatureGroup(
                                        name='Departure and destination point',
                                        show=True
                                        )
    # –°–æ—Ö–¥–∞—ë–º –º–∞—Ä–∫–µ—Ä—ã —Ç–æ—á–µ–∫
    departure_point = folium.Marker(
                        [start_point[0], start_point[1]],
                        popup = ("Departure location: "+ departure_address),
                        icon=folium.Icon(color='green',icon='ok-sign')
                        ).add_to(New_York_map)

    destination_point = folium.Marker(
                        [end_point[0], end_point[1]],
                        popup = ("Destination location: "+ destination_address),
                        icon=folium.Icon(color='red',icon='ok-sign')
                        ).add_to(New_York_map)
    
    folium.PolyLine(route,weight=8,color='blue',opacity=0.6).add_to(New_York_map)
    
    components.html(folium.Figure().add_child(New_York_map).render(), height=500) 
